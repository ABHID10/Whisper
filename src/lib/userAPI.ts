import { NextApiRequest, NextApiResponse } from 'next';

import validator from 'validator';
import { v4 as uuidv4 } from 'uuid';
import axios from 'axios';

import { UserModel } from '@/models/UserModel';
import statusCodes from '@/httpStatusCodes';
import connectMongo from '@/mongo';

let accessToken = process.env.ACCESS_TOKEN;
const clientId = process.env.clientId;
const clientSecret = process.env.clientSecret;
const domain = process.env.DOMAIN;

export const headers = {
  'Content-Type': 'application/json',
  Accept: 'application/json',
  Authorization: `Bearer ${accessToken}`,
};

export const createUserWithAutoId = async (email: string) => {
  // Logic to create a new user with an autogenerated ID
  return UserModel.create({ _id: uuidv4(), email });
};

// Define separate email validation middleware
export const emailValidator = async (
  req: NextApiRequest,
  res: NextApiResponse,
  next: Function
) => {
  const { email: emailBody } = req.body;
  const { email: emailQuery } = req.query;

  const isItInTheBody =
    typeof emailBody !== 'string' || !validator.isEmail(emailBody);
  const isItInQuery =
    typeof emailQuery !== 'string' || !validator.isEmail(emailQuery);

  if (isItInTheBody || isItInQuery) {
    return res.status(statusCodes.NOT_ACCEPTABLE).json({
      message: 'Email is invalid',
    });
  } else {
    await connectMongo();
    next();
  }
};

export const getAccessToken = async () => {
  try {
    const response = await axios.post(`${domain}/oauth2/token`, null, {
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      params: {
        grant_type: 'client_credentials',
        client_id: clientId,
        client_secret: clientSecret,
        audience: `${domain}/api`,
      },
    });

    if (response.status !== 200) {
      throw new Error(`Couldn't get access token`);
    }

    return response.data.access_token;
  } catch (error) {
    console.error('An error occurred:', error);
  }
};

export const getKindeUser = async (email: string) => {
  const response = await axios.get(`${domain}/api/v1/users?email=${email}`, {
    headers: {
      'Content-Type': 'application/json',
      Accept: 'application/json',
      Authorization: `Bearer ${accessToken}`,
    },
  });
  let data;
  if (response.status !== 200) {
    const errorText = response.data;
    if (errorText.errors[1].code === 'TOKEN_INVALID') {
      const newAccessToken = await getAccessToken();
      accessToken = newAccessToken;

      const response = await axios.get(
        `${domain}/api/v1/users?email=${email}`,
        {
          headers: {
            'Content-Type': 'application/json',
            Accept: 'application/json',
            Authorization: `Bearer ${newAccessToken}`,
          },
        }
      );

      data = response.data;
    } else {
      console.log(errorText);
      throw new Error(`Couldn't get user from kinde`);
    }
  } else {
    data = response.data;
  }
  return data;
};

export const createUserWithId = async (email: string, id: string) => {
  // Logic to create a new user with a provided ID
  const getUser = await getKindeUser(email);
  const doesUserExist = getUser.users ? true : false;

  if (doesUserExist) {
    return UserModel.create({ _id: id, email });
  }

  const inputBody = {
    identities: [
      {
        type: 'email',
        details: {
          email: email,
        },
      },
    ],
  };
  const response = await axios.post(`${domain}/api/v1/user`, inputBody, {
    headers: headers,
  });

  if (response.status !== 200) {
    const errorText = response.data;
    if (errorText.errors[1].code === 'TOKEN_INVALID') {
      const newAccessToken = await getAccessToken();
      accessToken = newAccessToken;

      await axios.post(`${domain}/api/v1/user`, inputBody, {
        headers: headers,
      });
    } else {
      throw new Error(`Couldn't add user to kinde`);
    }
  }

  return UserModel.create({ _id: id, email });
};
